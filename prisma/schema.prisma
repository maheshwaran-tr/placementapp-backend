generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Department {
  dept_id     Int       @id @default(autoincrement())
  name        String
  description String?
  logo_url    String?
  staff       Staff[]
  students    Student[]
}

model Status {
  status_id    Int           @id @default(autoincrement())
  status       String
  description  String?
  applications Application[]
}

model User {
  user_id    Int      @id @default(autoincrement())
  username   String   @unique
  email      String   @unique
  password   String
  role       UserRole
  created_at DateTime @default(now())
  admin      Admin?
  staff      Staff?
  student    Student?
}

model Student {
  student_id         Int           @id @default(autoincrement())
  user_id            Int           @unique
  rollno             String?
  regno              String?
  name               String
  dept_id            Int
  gender             String?
  father_name        String?
  dob                String?
  score_10th         Int?
  board_10th         String?
  yop_10th           Int?
  score_12th         Int?
  board_12th         String?
  yop_12th           Int?
  score_diploma      Int?
  branch_diploma     String?
  yop_diploma        Int?
  cgpa               Float?
  phone_number       String?
  email              String?
  placement_willing  String?
  created_at         DateTime      @default(now())
  current_arrears    Int           @default(0)
  history_of_arrears Int           @default(0)
  resume_url         String?
  profile_url        String?
  section            String?       @default("A")
  applications       Application[]
  department         Department    @relation(fields: [dept_id], references: [dept_id])
  user               User          @relation(fields: [user_id], references: [user_id])
}

model Staff {
  staff_id     Int        @id @default(autoincrement())
  user_id      Int        @unique
  staff_rollno String?
  dept_id      Int
  phone_number String?
  email        String?
  created_at   DateTime   @default(now())
  profile_url  String?
  name         String     @default("Arun")
  department   Department @relation(fields: [dept_id], references: [dept_id])
  user         User       @relation(fields: [user_id], references: [user_id])
}

model Admin {
  admin_id     Int      @id @default(autoincrement())
  user_id      Int      @unique
  phone_number String?
  email        String?
  created_at   DateTime @default(now())
  admin_rollno String?
  name         String?
  profile_url  String?
  user         User     @relation(fields: [user_id], references: [user_id])
}

model Company {
  company_id   Int      @id @default(autoincrement())
  company_name String
  created_at   DateTime @default(now())
  logo_url     String?
  drives       Drive[]
}

model Drive {
  drive_id                    Int           @id @default(autoincrement())
  company_id                  Int
  job_role                    String
  location                    String?
  description                 String?
  salary                      String?
  drive_date                  DateTime?
  drive_time                  String?
  eligible_10th_mark          Int?
  eligible_12th_mark          Int?
  eligible_cgpa               Float?
  created_at                  DateTime      @default(now())
  training_period             String?
  training_stipend            String?
  eligible_current_arrears    Int?
  eligible_history_of_arrears Int?
  job_type                    String?
  required_skills             String[]
  venue                       String?
  number_of_rounds            Int
  applications                Application[]
  company                     Company       @relation(fields: [company_id], references: [company_id])
}

model Application {
  application_id Int      @id @default(autoincrement())
  student_id     Int
  drive_id       Int
  status_id      Int
  created_at     DateTime @default(now())
  proof_url      String?
  drive          Drive    @relation(fields: [drive_id], references: [drive_id])
  status         Status   @relation(fields: [status_id], references: [status_id])
  student        Student  @relation(fields: [student_id], references: [student_id])
}

enum UserRole {
  student
  staff
  admin
}
